import telebot
from config import BOT_TOKEN
import telebot.types as types

from sqlalchemy import Column, Integer, String, create_engine, Boolean, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship



Base = declarative_base()

class Cinema(Base):
    __tablename__ = 'cinemas'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    address = Column(String)

class Movie(Base):
    __tablename__ = 'movies'
    id = Column(Integer, primary_key=True)
    title = Column(String)
    description = Column(String, nullable=True)

class Session(Base):
    __tablename__ = 'sessions'
    id = Column(Integer, primary_key=True)
    movie_id = Column(Integer, ForeignKey('movies.id'))
    cinema_id = Column(Integer, ForeignKey('cinemas.id'))
    date = Column(String)  # –§–æ—Ä–º–∞—Ç: 'YYYY-MM-DD'
    time = Column(String)  # –§–æ—Ä–º–∞—Ç: 'HH:MM'
    movie = relationship("Movie")
    cinema = relationship("Cinema")

class Seat(Base):
    __tablename__ = 'seats'
    id = Column(Integer, primary_key=True)
    session_id = Column(Integer, ForeignKey('sessions.id'))
    row = Column(Integer)  # –†—è–¥ (1-9)
    number = Column(Integer)  # –ú–µ—Å—Ç–æ (1-13)
    is_booked = Column(Boolean, default=False)
    session = relationship("Session")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
SQLALCHEMY_DATABASE_URL = "postgresql://postgres:postgres@db:5432/postgres"
engine = create_engine(SQLALCHEMY_DATABASE_URL)
Base.metadata.create_all(engine)
SessionLocal = sessionmaker(bind=engine)
db = SessionLocal()


user_data = {}
bot = telebot.TeleBot(BOT_TOKEN)

def init_db():
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    db.query(Cinema).delete()
    db.query(Movie).delete()
    db.query(Session).delete()
    db.query(Seat).delete()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã
    cinemas = [
        Cinema(name="–ö–∏–Ω–æ–º–∞–∫—Å", address="—É–ª. –ü—É—à–∫–∏–Ω–∞, 10"),
        Cinema(name="–°–∏–Ω–µ–º–∞ –ü–∞—Ä–∫", address="—É–ª. –õ–µ–Ω–∏–Ω–∞, 5")
    ]
    db.add_all(cinemas)
    db.commit()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º—ã
    movies = [
        Movie(title="–î—é–Ω–∞", description="–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"),
        Movie(title="–ö—Ä–µ–ø–∫–∏–π –æ—Ä–µ—à–µ–∫", description="–ë–æ–µ–≤–∏–∫")
    ]
    db.add_all(movies)
    db.commit()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∞–Ω—Å—ã
    sessions = [
        Session(movie_id=1, cinema_id=1, date="2024-12-20", time="18:00"),
        Session(movie_id=2, cinema_id=2, date="2024-12-21", time="20:00")
    ]
    db.add_all(sessions)
    db.commit()

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–∞ (9 —Ä—è–¥–æ–≤ √ó 13 –º–µ—Å—Ç)
    for session in sessions:
        for row in range(1, 10):
            for seat_num in range(1, 14):
                db.add(Seat(
                    session_id=session.id,
                    row=row,
                    number=seat_num,
                    is_booked=False  # –ü–æ–∫–∞ –≤—Å–µ –º–µ—Å—Ç–∞ —Å–≤–æ–±–æ–¥–Ω—ã
                ))
    db.commit()


@bot.message_handler(commands=['start'])
def start(message):
    user_data[message.chat.id] = {}  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cinemas = db.query(Cinema).all()
    for cinema in cinemas:
        markup.add(types.KeyboardButton(cinema.address))
    bot.send_message(
        message.chat.id,
        "üé¨ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text in [c.address for c in db.query(Cinema).all()])
def select_cinema(message):
    cinema = db.query(Cinema).filter_by(address=message.text).first()
    user_data[message.chat.id]['cinema_id'] = cinema.id

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å–º—ã –≤ —ç—Ç–æ–º –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ
    sessions = db.query(Session).filter_by(cinema_id=cinema.id).all()
    movies = {s.movie for s in sessions}

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for movie in movies:
        markup.add(types.KeyboardButton(movie.title))
    
    bot.send_message(
        message.chat.id,
        "üìΩ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text in [mov.title for mov in db.query(Movie).all()])
def select_movie(message):
    movie = db.query(Movie).filter_by(title=message.text).first()
    user_data[message.chat.id]['movie_id'] = movie.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∞–Ω—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ
    sessions = db.query(Session).filter_by(
        cinema_id=user_data[message.chat.id]['cinema_id'],
        movie_id=movie.id
    ).all()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for session in sessions:
        btn_text = f"{session.date} {session.time}"
        markup.add(types.KeyboardButton(btn_text))
    
    bot.send_message(
        message.chat.id,
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–µ–∞–Ω—Å–∞:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: any(f"{s.date} {s.time}" == m.text for s in db.query(Session).all()))
def select_session(message):
    date, time = message.text.split()
    session = db.query(Session).filter_by(date=date, time=time).first()
    user_data[message.chat.id]['session_id'] = session.id

    seats = db.query(Seat).filter_by(session_id=session.id).order_by(Seat.number, Seat.row).all()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=9)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ —Å–ª–µ–≤–∞
    screen_row = ["üé¶ –≠–ö–†–ê–ù"] + [""]*8  # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É - –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
    markup.row(*screen_row)
    
    # –°–æ–∑–¥–∞–µ–º 13 —Ä—è–¥–æ–≤ –ø–æ 9 –º–µ—Å—Ç (—É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É - –Ω–æ–º–µ—Ä —Ä—è–¥–∞)
    for row_num in range(1, 14):
        row_buttons = [f"–†—è–¥ {row_num}"]  # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É - –Ω–æ–º–µ—Ä —Ä—è–¥–∞
        
        for seat_num in range(1, 10):
            seat = next((s for s in seats if s.row == row_num and s.number == seat_num), None)
            if seat and seat.is_booked:
                row_buttons.append("‚ùå")
            else:
                row_buttons.append("üü¢")
        
        markup.row(*row_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    markup.row(types.KeyboardButton("üü¢ - —Å–≤–æ–±–æ–¥–Ω–æ | ‚ùå - –∑–∞–Ω—è—Ç–æ"))
    markup.row(types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä"))
    
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ (—ç–∫—Ä–∞–Ω —Å–ª–µ–≤–∞):",
        reply_markup=markup
    )

selected_seats = {}

@bot.message_handler(func=lambda m: m.text.strip() in ["üü¢", "‚ùå"])
def handle_seat_selection(message):
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª —Å–µ–∞–Ω—Å
    if chat_id not in user_data or 'session_id' not in user_data[chat_id]:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∞–Ω—Å!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—è–¥–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    reply_markup = message.reply_markup
    if not reply_markup:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # –ò—â–µ–º –≤ –∫–∞–∫–æ–π —Å—Ç—Ä–æ–∫–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
    for row in reply_markup.keyboard:
        if message.text in row:
            row_index = reply_markup.keyboard.index(row)
            seat_index = row.index(message.text)
            break
    else:
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ.")
        return
    
    # –ï—Å–ª–∏ –º–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–æ
    if message.text == "‚ùå":
        bot.send_message(chat_id, "–≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—è–¥ –∏ –º–µ—Å—Ç–æ
    seat_row = row_index  # –†—è–¥—ã –Ω—É–º–µ—Ä—É—é—Ç—Å—è —Å 1 (–ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å —ç–∫—Ä–∞–Ω–æ–º)
    seat_number = seat_index
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ –ª–∏ –º–µ—Å—Ç–æ –≤ –ë–î
    session_id = user_data[chat_id]['session_id']
    seat = db.query(Seat).filter_by(
        session_id=session_id,
        row=seat_row,
        number=seat_number
    ).first()
    
    if not seat or seat.is_booked:
        bot.send_message(chat_id, "–ú–µ—Å—Ç–æ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ! –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ö–µ–º—É –º–µ—Å—Ç.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    selected_seats[chat_id] = {
        'seat_id': seat.id,
        'row': seat_row,
        'number': seat_number
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω—å"))
    markup.row(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä"))
    
    bot.send_message(
        chat_id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: –†—è–¥ {seat_row}, –ú–µ—Å—Ç–æ {seat_number}\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω—å")
def confirm_booking(message):
    chat_id = message.chat.id
    
    if chat_id not in selected_seats:
        bot.send_message(chat_id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ.")
        return
    
    seat_data = selected_seats[chat_id]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤ –ë–î
    seat = db.query(Seat).get(seat_data['seat_id'])
    if seat.is_booked:
        bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ.")
        return
    
    seat.is_booked = True

    db.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    session = db.query(Session).get(user_data[chat_id]['session_id'])
    cinema = db.query(Cinema).get(session.cinema_id)
    movie = db.query(Movie).get(session.movie_id)
    
    bot.send_message(
        chat_id,
        f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n"
        f"üé¨ –§–∏–ª—å–º: {movie.title}\n"
        f"üè† –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä: {cinema.name}\n"
        f"üìÖ –î–∞—Ç–∞: {session.date} {session.time}\n"
        f"üí∫ –ú–µ—Å—Ç–æ: –†—è–¥ {seat_data['row']}, –ú–µ—Å—Ç–æ {seat_data['number']}\n\n"
        f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    del selected_seats[chat_id]
    if chat_id in user_data:
        del user_data[chat_id]

@bot.message_handler(func=lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä")
def cancel_booking(message):
    chat_id = message.chat.id
    if chat_id in selected_seats:
        del selected_seats[chat_id]
    
    bot.send_message(
        chat_id,
        "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–±–æ—Ä –º–µ—Å—Ç–∞.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    # –ú–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ö–µ–º—É –º–µ—Å—Ç
    select_session(message)


if __name__ == "__main__":
    init_db()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()